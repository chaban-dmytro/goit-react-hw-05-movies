{"version":3,"file":"static/js/597.517d2ab7.chunk.js","mappings":"2OA4EA,UAtEa,WACX,OAAwBA,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,6FACQC,EAAe,CACnBC,OAAQ,MACRC,IAAI,sCAAD,OAAwCL,EAAxC,YACHM,OAAQ,CAAEC,SAAU,SACpBC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NARR,mBAY4BC,EAAAA,EAAAA,IAAUR,GAZtC,OAYUS,EAZV,OAaIf,EAAQe,EAAUhB,KAAKiB,MACvBd,EAAU,YAdd,gDAgBIA,EAAU,YACVe,QAAQC,IAAR,MAjBJ,0DADc,uBAAC,WAAD,wBAsBdC,EACD,GAAE,CAAChB,KAEF,8BACc,SAAXF,EAAoB,MACnB,+BACE,iBAAKmB,UAAU,UAAf,UACc,YAAXnB,IAAwB,SAAC,IAAD,IACb,aAAXA,IAAyB,gDACd,aAAXA,IACkB,IAAhBF,EAAKsB,QACJ,iDAEA,+BACE,eAAID,UAAU,aAAd,SACGrB,EAAKuB,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5B,OACE,gBAAeL,UAAU,YAAzB,WACE,gBACEA,UAAU,WACVM,IAAG,yCAAoCD,GACvCE,IAAKJ,EACLK,QAAS,SAAAC,GACPA,EAAEC,OAAOJ,IAAMK,EACfF,EAAEC,OAAOH,IAAM,SAChB,KAEH,cAAGP,UAAU,YAAb,SAA0BG,KAC1B,cAAGH,UAAU,YAAb,SAA0BI,MAXnBD,EAcZ,eASpB,C","sources":["components/Cast.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { fetchById } from 'api';\nimport { useEffect, useState } from 'react';\nimport noImg from 'no_img.jpg';\nimport Loader from './Loader';\n\nconst Cast = () => {\n  const [data, setData] = useState();\n  const [status, setStatus] = useState('idle');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      const optionsForId = {\n        method: 'GET',\n        url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n        params: { language: 'en-US' },\n        headers: {\n          accept: 'application/json',\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZGMyZmM3OWE5Njc5NTQ5MTJjYTVhYWQ0NWI5NTU3NCIsInN1YiI6IjY1MDA0YzQzMWJmMjY2MDBmZmI1YWI1ZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.zirrhOIT7yqxW1n0pdlMVLkB4-AicQWjZCs5JhftH6Q',\n        },\n      };\n      try {\n        const movieById = await fetchById(optionsForId);\n        setData(movieById.data.cast);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        console.log(error);\n      }\n    }\n    // eslint-disable-next-line\n    fetchData();\n  }, [movieId]);\n  return (\n    <>\n      {status === 'idle' ? null : (\n        <>\n          <div className=\"wrapper\">\n            {status === 'pending' && <Loader />}\n            {status === 'rejected' && <div>Error! Reload page</div>}\n            {status === 'resolved' &&\n              (data.length === 0 ? (\n                <div>There are no info!</div>\n              ) : (\n                <>\n                  <ul className=\"cast-items\">\n                    {data.map(({ name, character, profile_path }) => {\n                      return (\n                        <li key={name} className=\"cast-item\">\n                          <img\n                            className=\"cast-img\"\n                            src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                            alt={name}\n                            onError={e => {\n                              e.target.src = noImg;\n                              e.target.alt = 'No info';\n                            }}\n                          />\n                          <p className=\"cast-text\">{name}</p>\n                          <p className=\"cast-text\">{character}</p>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </>\n              ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["useState","data","setData","status","setStatus","movieId","useParams","useEffect","optionsForId","method","url","params","language","headers","accept","Authorization","fetchById","movieById","cast","console","log","fetchData","className","length","map","name","character","profile_path","src","alt","onError","e","target","noImg"],"sourceRoot":""}